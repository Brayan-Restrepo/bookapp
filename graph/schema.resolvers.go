package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"bookapp/ent"
	"context"
	"fmt"
	"strconv"
	"time"
)

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *ent.Book) (*ent.User, error) {
	author, err := obj.QueryAuthor().Only(ctx)
	if err != nil {
		return nil, err
	}
	return author, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, title string, authorID int) (*ent.Book, error) {
	return r.Client.Book.
		Create().
		SetTitle(title).
		SetAuthorID(authorID).
		SetCreatedAt(time.Now()).
		Save(ctx)
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id int, title *string, authorID int) (*ent.Book, error) {
	update := r.Client.Book.UpdateOneID(id)
	if title != nil {
		update.SetTitle(*title)
	}

	update.SetAuthorID(authorID)
	return update.Save(ctx)
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id int) (*ent.Book, error) {
	book, err := r.Client.Book.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	if err := r.Client.Book.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return book, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*ent.User, error) {
	return r.Client.User.
		Create().
		SetName(name).
		Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, name *string) (*ent.User, error) {
	update := r.Client.User.UpdateOneID(id)
	if name != nil {
		update.SetName(*name)
	}
	return update.Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*ent.User, error) {
	user, err := r.Client.User.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	if err := r.Client.User.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return user, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*ent.Book, error) {
	return r.Client.Book.Query().All(ctx)
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*ent.Book, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Book.Get(ctx, idInt)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.Query().All(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.User.Get(ctx, idInt)
}

// Books is the resolver for the books field.
func (r *userResolver) Books(ctx context.Context, obj *ent.User) ([]*ent.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
